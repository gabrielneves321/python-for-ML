# -*- coding: utf-8 -*-
"""Untitled97.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OVP4zMONWXf0CV2p9Wo68dk-zqAdHLND
"""

!pip3 install Pillow

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
img = plt.imread("nature.jpg")
print(img)

type(img)

plt.imshow(img)
plt.show()

img1 = plt.imread("nature1.jfif")
plt.imshow(img1)
plt.show()

img1 = plt.imread("nature1.jfif")
plt.imshow(img1, cmap = 'gray')
plt.show()

img1 = plt.imread("nature1.jfif")
plt.imshow(img1, cmap = 'gist_gray_r')
plt.show()

plt.colormaps()

import matplotlib.patches as patches
fig, ax = plt.subplots()
im = ax.imshow(img)
patch = patches.Circle((245, 200),radius=200,transform=ax.transData)
im.set_clip_path(patch)
ax.axis('on')
plt.show()

img2 = [[1, 2, 3, 4],
[5, 6, 7, 8],
[9, 10, 11, 12],
[13, 14, 15, 16]]
plt.imshow(img2)
plt.show()

methods = ['none', 'antialiased', 'nearest', 'bilinear',
'bicubic', 'spline16', 'spline36', 'hanning',
'hamming', 'hermite', 'kaiser', 'quadric',
'catrom', 'gaussian', 'bessel', 'mitchell',
'sinc', 'lanczos', 'blackman']

fig, axs = plt.subplots(nrows=4, ncols=6, figsize=(9, 6),
                        subplot_kw={'xticks': [], 'yticks': []})


for ax, interp_method in zip(axs.flat, methods):
    ax.imshow(img2, interpolation=interp_method, cmap='hot')
    ax.set_title(str(interp_method))
plt.tight_layout()
plt.show()

!pip3 install scipy

from scipy.io import wavfile
samplerate, data = wavfile.read('samplesound.wav')
print(samplerate)

samplerate, data = wavfile.read('samplesound.wav')
print(samplerate)
print(data)

print(type(data))
print(data.shape)
print(data.ndim)
print(data.dtype)
print(data.size)
print(data.nbytes)

samplerate, data = wavfile.read('samplesound.wav')
plt.plot(data[:2000])
plt.show()

samples = data.shape[0]
print(samples)

plt.plot(data[:10*samplerate])
plt.show()

channel1 = data[:, 0]
channel2 = data[:, 1]
print(channel1, channel2)

plt.subplot(2, 1, 1)
plt.plot(channel1[:10*samplerate])
plt.subplot(2, 1, 2)
plt.plot(channel2[:10*samplerate], c='g')
plt.show()

