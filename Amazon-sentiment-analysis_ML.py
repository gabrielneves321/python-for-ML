# -*- coding: utf-8 -*-
"""Untitled57.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16vHNGUeqd8iYhYyOg6vst2EEUeJvrLBS
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd #used for dataframes
import numpy as np #used for multidimensional arrays
import matplotlib.pyplot as plt #data visualization
import seaborn as sns #data visualization
import re #regular expression
# %matplotlib inline 

import warnings #to drop warning message
warnings.filterwarnings("ignore") #to ignore the warnings during execution
plt.style.use('ggplot') #print(plt.style.available)

import nltk #natural language toolkit
nltk.download('punkt')
from nltk import word_tokenize

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from collections import Counter
from wordcloud import WordCloud

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score

df = pd.read_csv('/content/newreviews (1).csv')

df.head()

df.shape

#splitting the dataframe and changing the original df
df = df.sample(frac = 0.20,replace = True).reset_index(drop=True)

df.head()

df.shape

df.info()

df.isna().sum()

df.dropna(inplace=True)

df.isna().sum()

print(len(df))

rating_pct = df['Score'].value_counts()/len(df) * 100
rating_pct

rating_pct.plot.bar()
plt.show()

from wordcloud import WordCloud
#words for review
plt.figure(figsize=(14,6))
WordsPerReview = df['Text'].apply(lambda x: len(x.split(' ')))

sns.histplot(WordsPerReview, bins=100)
plt.xlabel('Review Lenght')
plt.show()

txt = ' '.join(review for review in df.Text)
wordcloud = WordCloud(

background_color = 'white',
max_font_size = 100,
max_words = 100,
width = 800,
height = 500
).generate(txt)

plt.imshow(wordcloud,interpolation = 'bilinear')
plt.axis('off')
plt.show()

df = pd.DataFrame(df,columns = ['Score','Text'])
df.rename(columns = {'Score':'Rating','Text':'Review'},inplace = True)

def apply_sentiment(Rating):
    if(Rating <=2 ):
        return 0
    else:
        return 1

df['Sentiment'] = df['Rating'].apply(apply_sentiment)
df.drop(['Rating'],axis = 1, inplace = True)

sentiment = df['Sentiment'].value_counts()
sentiment

plt.figure(figsize = ( 10,8))
sns.countplot(data = df, x = 'Sentiment')
plt.show()

def clean_text(Review):

    Review = str(Review).lower() # convert to lowercase
    Review = re.sub('\[.*?\]', '', Review)
    Review = re.sub('https?://\S+|www\.\S+', '', Review) # Remove URls
    Review = re.sub('<.*?>+', '', Review)
    Review = re.sub(r'[^a-z0-9\s]', '', Review) # Remove punctuation
    Review = re.sub('\n', '', Review)
    Review = re.sub('\w*\d\w*', '', Review)
    return Review

df['Review'] = df['Review'].apply(clean_text)
df.head()

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))
stopword = []
sentence = df['Review'][0]

#words = nltk.word_tokenize(sentence)

def remove_stopword(stop_words, sentence):
    return [word for word in nltk.word_tokenize(sentence) if word not in stop_words]
df['reviews_text'] = df['Review'].apply(lambda row: remove_stopword(stop_words, row))

df.head(3)

X = df.reviews_text.astype(str)
y = df.Sentiment.astype(str)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 42,
                                                     test_size = 0.20)

X_train.shape,X_test.shape,y_train.shape

from sklearn.pipeline import Pipeline 
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, TfidfTrans
from sklearn.naive_bayes import MultinomialNB 
pipeline = Pipeline([('vect', CountVectorizer(stop_words= "english", lowercase = True)),

fit_model = pipeline.fit(X_train,y_train)

print('Training accuracy:', fit_model.score(X_train,y_train))
print('Test accuracy:', fit_model.score(X_test,y_test))