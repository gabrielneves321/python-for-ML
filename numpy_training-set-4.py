# -*- coding: utf-8 -*-
"""Untitled66.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1222FsP-wS7L9R7E9TpCPLRLvJ4eWZRqd
"""

# If you want to delete multiple items from an array, you can pass the item
# indexes in the form of a list to the delete() method. For example, the
# following script deletes the items at index 1 and 2 from the NumPy array
# named my_array.

import numpy as np
my_arr = np.array(["Red","Green","Orange"])
print(my_arr)
print("After deletion")
updated_array = np.delete(my_arr, [1,2])
print(updated_array)

# You can delete a row or column from a 2-D array using the delete method.
# However, just as you did with the append() method for adding items, you
# need to specify whether you want to delete a row or column using the axis
# attribute.
# The following script creates an integer array with four rows and five
# columns. Next, the delete() method is used to delete the row at index 1
# (second row). Notice here that to delete the array, the value of the axis
# attribute is set to 0.

import numpy as np
integer_random = np.random.randint(1,11,size=(4,5))
print(integer_random)
print("After deletion")
updated_array = np.delete(integer_random,1,axis=0)
print(updated_array)

# Finally, to delete a column, you can set the value of the axis attribute to 1, as
# shown below:

import numpy as np
integer_random = np.random.randint(1,11,size=(4,5))
print(integer_random)
print("After deletion")
updated_array = np.delete(integer_random,1,axis=1)
print(updated_array)

# You can sort NumPy arrays of various types. Numeric arrays are sorted by
# default in ascending order of numbers. On the other hand, text arrays are
# sorted alphabetically.
# To sort an array in NumPy, you may call the np.sort() function and pass it to
# your NumPy array. The following script shows how to sort a NumPy array of
# 10 random integers between 1 and 20.

import numpy as np
print("unsorted array")
my_arr = np.random.randint(1,20,10)
print(my_arr)
print("\nsorted array")
sorted_array = np.sort(my_arr)
print(sorted_array)

# As mentioned earlier, text arrays are sorted in alphabetical order. Here is an
# example of how you can sort a text array with the NumPy sort() method.

import numpy as np
print("unsorted array")
my_array = np.array(["Red", "Green", "Blue", "Yellow"])
print(my_array)
print("\nsorted array")
sorted_array = np.sort(my_array)
print(sorted_array)

# Finally, Boolean arrays are sorted in a way that all the False values appear
# first in an array. Here is an example of how you can sort the Boolean arrays
# in NumPy.

import numpy as np
print("unsorted array")
my_arr = np.array([False, True, True, False, False, True, False, True])
print(my_arr)
print("\nSorted array")
sorted_array = np.sort(my_arr)
print(sorted_array)

# NumPy also allows you to sort two-dimensional arrays. In two-dimensional
# arrays, each item itself is an array. The sort() function sorts an item in each
# individual array in a two-dimensional array.
# The script below creates a two-dimensional array of shape (4,6) containing
# random integers between 1 to 20. The array is then sorted via the np.sort()
# method.

import numpy as np
print("unsorted array")
my_arr = np.random.randint(1,20, size = (4,6))
print(my_arr)
print("sorted array")
sorted_array = np.sort(my_arr)
print(sorted_array)

# You can also sort an array in descending order. To do so, you can first sort an
# array in ascending order via the sort() method. Next, you can pass the sorted
# array to the flipud() method, which reverses the sorted array and returns the
# array sorted in descending order. Here is an example of how you can sort an
# array in descending order.

import numpy as np
print("unsorted array")
my_arr = np.random.randint(1,20,10)
print(my_arr)
print("\nSorted array")
sorted_array = np.sort(my_arr)
reverse_sorted = np.flipud(sorted_array)
print(reverse_sorted)

# You can also modify the shape of a NumPy array. To do so, you can use the
# reshape() method and pass it the new shape for your NumPy array.
# In this section, you will see how to reshape a NumPy array from lower to
# higher dimensions and vice versa.
# The following script defines a one-dimensional array of 10 random integers
# between 1 and 20. The reshape() function reshapes the array into the shape
# (2,5).

import numpy as np
print("one-dimensional array")
one_d_array = np.random.randint(1,20,10)
print(one_d_array)
print("\ntwo-dimensional array")
two_d_array = one_d_array.reshape(2,5)
print(two_d_array)

# It is important to mention that the product of the rows and columns of the
# original array must match the value of the product of rows and columns of
# the reshaped array. For instance, the shape of the original array in the last
# script was (10,) with product 10. The product of the rows and columns in the
# reshaped array was also 10 (2 x 5)
# You can also call the reshape() function directly from the NumPy module and
# pass it the array to be reshaped as the first argument and the shape tuple as
# the second argument. Here is an example which converts an array of shape
# (10,) to (2,5).

import numpy as np
print("one-dimensional array")
one_d_array = np.random.randint(1,20,10)
print(one_d_array)
print("\ntwo-dimensional array")
two_d_array = np.reshape(one_d_array,(2,5))
print(two_d_array)